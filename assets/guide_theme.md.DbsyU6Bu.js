import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.B8c-iZzD.js";const y=JSON.parse('{"title":"定制主题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/theme.md","filePath":"guide/theme.md","lastUpdated":1733205978000}'),t={name:"guide/theme.md"},n=e(`<h1 id="定制主题" tabindex="-1">定制主题 <a class="header-anchor" href="#定制主题" aria-label="Permalink to &quot;定制主题&quot;">​</a></h1><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>nzcki-uniapp 支持灵活的样式定制，满足多种视觉业务和品牌需求，包括但不限于全局主色调和特定组件视觉定制的支持。</p><h3 id="方式一-使用-css-variables-进行主题配置" tabindex="-1">方式一: 使用 CSS Variables 进行主题配置 <a class="header-anchor" href="#方式一-使用-css-variables-进行主题配置" aria-label="Permalink to &quot;方式一: 使用 CSS Variables 进行主题配置&quot;">​</a></h3><p><code>zckui-uniapp</code> 组件可以通过 CSS Vars 来组织样式，通过覆盖这些 CSS 变量，可以实现定制主题、动态切换主题等功能。 每个组件变量都在各个组件文档底部详细提供。</p><p>我们更推荐使用替换 CSS Vars 的方式来进行个性化的主题配置。</p><h3 id="使用-sass-变量-进行主题配置" tabindex="-1">使用 Sass 变量 进行主题配置 <a class="header-anchor" href="#使用-sass-变量-进行主题配置" aria-label="Permalink to &quot;使用 Sass 变量 进行主题配置&quot;">​</a></h3><h4 id="_1-新建自定义变量-scss-文件" tabindex="-1">1. 新建自定义变量 SCSS 文件 <a class="header-anchor" href="#_1-新建自定义变量-scss-文件" aria-label="Permalink to &quot;1. 新建自定义变量 SCSS 文件&quot;">​</a></h4><p>在本地项目中新建一个 SCSS 文件 custom_theme.scss 进行自定义。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 主色调</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$primary-color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> #</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">478EF2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$primary-color-end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> #</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">496AF2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre></div><h4 id="_2-修改-vite配置文件" tabindex="-1">2. 修改 vite配置文件 <a class="header-anchor" href="#_2-修改-vite配置文件" aria-label="Permalink to &quot;2. 修改 vite配置文件&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// vite.config.ts</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> defineConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vite</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  css</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    preprocessorOptions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      scss</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        azcktionalData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@import </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@/assets/custom_theme.scss</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">;@import </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nutui-uniapp/styles/variables.scss</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre></div><h3 id="自定义组件的-style-或-class" tabindex="-1">自定义组件的 style 或 class <a class="header-anchor" href="#自定义组件的-style-或-class" aria-label="Permalink to &quot;自定义组件的 style 或 class&quot;">​</a></h3><p>默认情况下，在微信小程序环境组件的 class 和 style 不会被成功编译，如果你想自定义某些组件的 <code>class</code> 或 <code>style</code>，请传递props <code>customClass</code>和<code>customStyle</code>，目前不是每个组件都支持，后续会考虑支持到每个组件</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>另外，也可以在 <a href="https://uniapp.dcloud.net.cn/collocation/manifest.html" target="_blank" rel="noreferrer">manifest.json</a> 的 <a href="https://uniapp.dcloud.net.cn/collocation/manifest.html#mp-weixin" target="_blank" rel="noreferrer">mp-weixin</a> 字段下添加 <code>&quot;mergeVirtualHostAttributes&quot;: true</code> 配置，用于合并组件虚拟节点外层属性，之后大部分单根节点的组件即可支持 <code>class</code> 及 <code>style</code> 属性</p></div>`,15),l=[n];function h(p,k,r,d,c,o){return a(),i("div",null,l)}const u=s(t,[["render",h]]);export{y as __pageData,u as default};
